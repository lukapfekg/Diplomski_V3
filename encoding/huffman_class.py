from collections import Counter


class NodeTree(object):
    def __init__(self, left=None, right=None):
        self.left = left
        self.right = right

    def children(self):
        return self.left, self.right

    def __str__(self):
        return self.left, self.right


def huffman_code_tree(node, binString=''):
    '''
    Function to find Huffman Code
    '''
    if type(node) is str:
        return {node: binString}
    (l, r) = node.children()
    d = dict()
    d.update(huffman_code_tree(l, binString + '0'))
    d.update(huffman_code_tree(r, binString + '1'))
    return d


def make_tree(nodes):
    '''
    Function to make tree
    :param nodes: Nodes
    :return: Root of the tree
    '''
    while len(nodes) > 1:
        (key1, c1) = nodes[-1]
        (key2, c2) = nodes[-2]
        nodes = nodes[:-2]
        node = NodeTree(key1, key2)
        nodes.append((node, c1 + c2))
        nodes = sorted(nodes, key=lambda x: x[1], reverse=True)
    return nodes[0][0]


def create_huff_dict(freq):
    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)
    node = make_tree(freq)
    encoding = huffman_code_tree(node)
    return encoding


from dahuffman import HuffmanCodec

freq = {'65': 1282, 'E': 22500, '64': 2476, '66': 351, '71': 267, '(0,-5)': 2550, '(0,-11)': 674, '(0,7)': 1495,
        '(0,5)': 2540, '(3,-3)': 87, '(0,2)': 7654, '(0,1)': 13835, '(0,4)': 3462, '(0,-10)': 824, '(0,-1)': 13776,
        '(0,-7)': 1439, '(0,15)': 375, '(0,-3)': 4771, '(1,-2)': 1829, '(3,-2)': 273, '(1,-1)': 4832, '(3,1)': 1527,
        '(1,1)': 4928, '(5,-1)': 649, '(8,1)': 262, '77': 329, '(0,9)': 952, '(0,-18)': 241, '(0,-12)': 666,
        '(0,-4)': 3566, '(0,10)': 867, '(1,2)': 1896, '(0,-2)': 7491, '69': 318, '(1,-11)': 52, '(2,2)': 603,
        '(0,17)': 288, '(0,-13)': 486, '(2,-1)': 2286, '(10,1)': 203, '67': 348, '(0,3)': 4778, '(1,-7)': 153,
        '(0,-14)': 423, '(0,8)': 1159, '(0,6)': 1780, '(2,1)': 2281, '(4,1)': 999, '(16,-1)': 37, '87': 165,
        '(0,-9)': 940, '(0,-27)': 105, '107': 105, '(0,-15)': 369, '(6,1)': 489, '84': 214, '(0,12)': 581,
        '(0,-6)': 1740, '(0,26)': 116, '(0,21)': 175, '(2,-2)': 595, '(5,-6)': 4, '(11,-2)': 49, '62': 31,
        '(0,-26)': 106, '(0,-30)': 74, '(0,-8)': 1248, '(3,-1)': 1549, '(1,5)': 324, '(9,-2)': 36, '(0,-20)': 184,
        '(0,-32)': 57, '(3,2)': 311, '(0,-33)': 56, '(1,12)': 37, '(4,-3)': 40, '(9,-1)': 261, '55': 36, '(1,4)': 471,
        '(2,-9)': 9, '(1,-5)': 305, '(1,-9)': 89, '(5,1)': 675, '(8,-1)': 271, '45': 41, '(0,22)': 186, '(0,32)': 57,
        '(0,11)': 623, '(1,11)': 43, '(3,4)': 47, '30': 36, '(0,43)': 26, '(1,-4)': 512, '(1,-6)': 227, '(7,-1)': 346,
        '79': 406, '(1,3)': 863, '(9,1)': 278, '96': 195, '(1,7)': 161, '(0,-17)': 312, '(6,-1)': 491, '68': 295,
        '70': 280, '80': 333, '54': 28, '(0,-42)': 30, '(0,-22)': 165, '(3,-9)': 5, '(11,-1)': 127, '(13,1)': 74,
        '56': 25, '(0,37)': 51, '(0,-24)': 158, '(1,-23)': 6, '(0,23)': 173, '41': 52, '(0,14)': 449, '(0,39)': 32,
        '(1,6)': 187, '(0,-21)': 159, '(6,2)': 46, '51': 45, '(0,29)': 94, '(4,-1)': 967, '(4,-4)': 13, '(10,-2)': 11,
        '88': 211, '85': 210, '(0,18)': 251, '(2,-3)': 198, '72': 290, '(4,-2)': 160, '76': 311, '(5,-2)': 72,
        '(1,-12)': 56, '73': 287, '(0,24)': 154, '25': 37, '(1,-3)': 878, '(20,1)': 14, '92': 204, '(1,17)': 18,
        '(13,-1)': 77, '(12,-1)': 85, '(0,-19)': 256, '(1,8)': 100, '82': 235, '(0,16)': 331, '86': 185, '(0,-16)': 341,
        '61': 37, '(1,51)': 2, '(3,3)': 92, '(28,-1)': 6, '75': 294, '(0,50)': 17, '(11,1)': 140, '(0,53)': 10,
        '(0,58)': 22, '(0,59)': 13, '(0,25)': 123, '(7,1)': 322, '(1,-10)': 69, '(20,-1)': 14, '(0,19)': 201,
        '(0,-23)': 194, '(2,3)': 221, '(0,31)': 76, '(0,28)': 94, '18': 32, '(6,-2)': 51, '91': 184, '(0,13)': 507,
        '74': 293, '101': 175, '(0,54)': 16, '32': 52, '36': 34, '29': 38, '23': 45, '13': 70, '9': 149, '24': 51,
        '(0,35)': 48, '(0,20)': 224, '90': 180, '(0,-41)': 33, '(0,-44)': 38, '(1,-8)': 109, '(14,-2)': 12, '49': 34,
        '(1,-34)': 2, '(5,2)': 79, '(15,-1)': 19, '103': 154, '102': 145, '(13,2)': 22, '(15,1)': 29, '39': 45,
        '48': 35, '47': 64, '40': 40, '27': 43, '12': 71, '95': 222, '(0,-39)': 41, '(0,30)': 89, '(10,-1)': 190,
        '(0,27)': 102, '(0,-29)': 82, '52': 12, '(5,-4)': 4, '(12,1)': 80, '81': 309, '94': 183, '98': 197,
        '(0,38)': 37, '(2,7)': 17, '43': 32, '38': 30, '19': 37, '99': 176, '59': 40, '(0,-47)': 19, '34': 44,
        '(0,-37)': 44, '(4,2)': 165, '(2,-4)': 90, '89': 182, '(0,40)': 32, '42': 41, '44': 41, '33': 42, '31': 45,
        '35': 35, '22': 40, '17': 40, '60': 30, '(0,-52)': 19, '(3,8)': 2, '(6,8)': 1, '(12,-2)': 13, '100': 157,
        '(1,13)': 29, '(0,-35)': 57, '(8,-2)': 27, '(2,-7)': 15, '(5,-3)': 22, '(1,19)': 14, '(5,12)': 1, '(9,-4)': 1,
        '(5,3)': 17, '(4,16)': 1, '(9,9)': 1, '50': 28, '37': 34, '(0,-38)': 45, '(0,36)': 47, '114': 74, '110': 92,
        '(0,-25)': 114, '(2,6)': 31, '(2,-5)': 48, '112': 91, '(1,22)': 9, '26': 24, '(0,34)': 57, '16': 44,
        '(3,5)': 22, '93': 192, '113': 63, '(0,-34)': 64, '(0,-28)': 102, '(2,4)': 116, '21': 33, '(4,3)': 41,
        '(5,6)': 2, '(0,-31)': 76, '104': 127, '46': 40, '(1,-25)': 6, '(6,-9)': 1, '109': 92, '97': 196, '(1,-13)': 23,
        '(8,2)': 25, '(4,5)': 5, '28': 41, '(3,6)': 10, '(1,10)': 52, '78': 344, '(3,-5)': 20, '(12,2)': 12,
        '(26,1)': 4, '(7,2)': 29, '57': 35, '58': 38, '(3,-8)': 8, '(7,-7)': 1, '108': 109, '(0,33)': 61, '116': 57,
        '63': 43, '(1,27)': 8, '(0,44)': 28, '14': 43, '(0,-40)': 35, '(2,5)': 64, '(24,1)': 3, '(0,46)': 19, '111': 84,
        '(0,-46)': 23, '(1,-14)': 22, '(1,21)': 10, '20': 43, '(2,15)': 1, '105': 107, '(0,-36)': 41, '(1,9)': 83,
        '83': 240, '(4,4)': 18, '(0,-45)': 30, '(26,-1)': 3, '53': 34, '(2,-6)': 41, '(3,-4)': 29, '15': 40,
        '(23,-1)': 3, '(1,-26)': 2, '(0,41)': 31, '106': 108, '(1,-19)': 12, '(16,1)': 34, '(1,15)': 17, '(1,-17)': 15,
        '(19,1)': 16, '(5,4)': 8, '(22,1)': 6, '(1,-28)': 6, '(1,-18)': 8, '(0,47)': 28, '(9,14)': 1, '(3,7)': 11,
        '(28,1)': 6, '(14,-1)': 48, '(0,-43)': 16, '(19,-1)': 15, '(1,18)': 9, '117': 56, '(14,1)': 41, '(11,2)': 49,
        '(0,-56)': 10, '(1,-24)': 13, '(1,20)': 19, '(1,14)': 17, '(9,2)': 32, '(1,-21)': 7, '(2,-28)': 1, '(7,-2)': 42,
        '(21,1)': 8, '(1,-16)': 21, '(4,-5)': 5, '(0,-60)': 8, '(2,-8)': 11, '(13,-2)': 23, '(18,-1)': 7, '(2,10)': 8,
        '(1,24)': 5, '(30,-1)': 3, '(3,-13)': 2, '(2,-10)': 4, '(18,1)': 13, '(4,-8)': 1, '(0,-49)': 13, '(2,9)': 12,
        '(22,-1)': 7, '(1,-15)': 23, '(17,1)': 18, '(10,2)': 17, '11': 98, '(0,-58)': 13, '(1,16)': 19, '(2,8)': 14,
        '(2,17)': 3, '(3,14)': 1, '(0,-50)': 16, '(0,-51)': 13, '(0,49)': 17, '(1,-27)': 4, '(2,-13)': 4, '(0,-55)': 11,
        '(1,-29)': 8, '(1,32)': 3, '(3,-6)': 7, '(17,-1)': 27, '(0,-53)': 13, '(2,12)': 5, '(1,-20)': 9, '(3,-7)': 10,
        '(21,-1)': 8, '(1,-42)': 2, '(0,42)': 16, '(0,45)': 23, '(6,-3)': 4, '(1,39)': 2, '(7,3)': 3, '(8,-4)': 1,
        '(1,-22)': 9, '(1,-32)': 4, '(0,48)': 25, '(1,23)': 6, '(2,-20)': 1, '(0,52)': 21, '(1,26)': 2, '(3,-18)': 1,
        '(0,56)': 12, '(1,30)': 3, '(2,-11)': 4, '(0,-57)': 13, '(1,33)': 3, '(27,1)': 4, '(0,-54)': 12, '(3,-68)': 1,
        '(5,-11)': 1, '7': 172, '(0,-48)': 17, '10': 121, '(0,-71)': 10, '(7,-3)': 5, '(1,-31)': 3, '(2,-17)': 2,
        '(10,-3)': 6, '115': 63, '(3,-12)': 1, '(0,61)': 11, '(0,57)': 10, '(0,-62)': 11, '(8,-3)': 15, '(1,43)': 3,
        '(36,-1)': 2, '(1,48)': 1, '(0,60)': 9, '(1,35)': 3, '(0,63)': 9, '(2,-34)': 1, '(11,3)': 10, '(1,25)': 4,
        '(0,51)': 13, '(2,24)': 1, '(1,46)': 1, '(6,5)': 2, '(9,-3)': 17, '(9,3)': 22, '(0,62)': 1, '(0,-65)': 8,
        '(2,14)': 1, '(6,-4)': 3, '(3,9)': 2, '(0,55)': 12, '(1,47)': 1, '(5,5)': 3, '(12,-4)': 1, '6': 150, '8': 123,
        '(0,71)': 8, '4': 237, '5': 235, '(0,-61)': 15, '(0,-63)': 10, '(0,-68)': 9, '(1,-50)': 2, '(5,-15)': 1,
        '(10,6)': 2, '122': 193, '120': 124, '(0,-59)': 9, '2': 318, '(0,-66)': 6, '119': 104, '(15,-2)': 2, '118': 74,
        '(0,-67)': 8, '(0,-72)': 6, '(0,64)': 7, '(1,49)': 1, '(5,13)': 1, '(10,-5)': 5, '(8,3)': 8, '121': 138,
        '(1,-77)': 1, '(1,-30)': 3, '(25,-1)': 1, '3': 247, '(1,-46)': 2, '(8,-6)': 1, '(2,11)': 5, '(0,72)': 7,
        '123': 280, '(6,3)': 2, '(1,-43)': 1, '(5,-5)': 1, '(36,1)': 1, '(2,-15)': 1, '(2,30)': 1, '(2,-12)': 1,
        '(23,1)': 3, '(0,-64)': 3, '(29,1)': 2, '(24,-1)': 1, '(11,-3)': 9, '(18,-2)': 1, '(1,31)': 2, '(15,2)': 2,
        '(1,28)': 5, '0': 1251, '127': 770, '(2,-47)': 4, '(6,28)': 4, '(0,77)': 23, '(3,33)': 29, '(7,-10)': 31,
        '(1,77)': 4, '(6,-23)': 4, '(10,9)': 5, '126': 471, '125': 375, '(0,-77)': 28, '1': 248, '124': 328,
        '(3,-33)': 24, '(7,10)': 37, '(5,-21)': 3, '(9,-8)': 3, '(5,44)': 1, '(13,3)': 1, '(1,-70)': 13, '(5,8)': 20,
        '(4,-26)': 3, '(7,21)': 3, '(0,74)': 5, '(3,45)': 1, '(0,67)': 4, '(0,69)': 5, '(27,-1)': 1, '(1,70)': 11,
        '(5,-8)': 16, '(9,8)': 4, '(4,17)': 1, '(1,34)': 2, '(0,66)': 3, '(0,-70)': 3, '(1,-71)': 8, '(4,-7)': 1,
        '(0,65)': 3, '(0,79)': 2, '(0,-82)': 2, '(1,42)': 1, '(7,-5)': 1, '(0,-76)': 6, '(0,76)': 4, '(0,-78)': 5,
        '(1,29)': 2, '(0,78)': 4, '(2,22)': 1, '(8,5)': 6, '(12,-3)': 6, '(21,-2)': 1, '(0,75)': 6, '(3,46)': 3,
        '(1,-41)': 1, '(0,73)': 4, '(0,68)': 3, '(3,-32)': 5, '(1,41)': 4, '(6,-30)': 4, '(9,-11)': 4, '(1,-36)': 2,
        '(2,20)': 1, '(0,-79)': 2, '(5,-25)': 3, '(13,4)': 3, '(0,-73)': 4, '(1,-54)': 1, '(5,-16)': 1, '(5,25)': 2,
        '(13,-4)': 2, '(0,88)': 1, '(30,1)': 1, '(14,2)': 3, '(3,-31)': 1, '(1,-40)': 1, '(0,-69)': 4, '(1,50)': 1,
        '(5,16)': 1, '(10,-6)': 1, '(3,32)': 3, '(4,-65)': 2, '(8,21)': 4, '(12,-5)': 4, '(3,-34)': 1, '(1,-57)': 1,
        '(0,-74)': 4, '(3,31)': 1, '(4,-6)': 1, '(1,69)': 1, '(1,-60)': 1, '(4,-66)': 2, '(1,71)': 4, '(5,-23)': 1,
        '(1,-33)': 1, '(1,-39)': 1, '(5,9)': 1, '(2,-14)': 1, '(2,16)': 2, '(5,21)': 3, '(1,-44)': 1, '(3,47)': 3,
        '(21,2)': 1, '(3,79)': 1, '(2,27)': 1, '(3,-80)': 1, '(7,-21)': 1, '(0,-84)': 1, '(4,20)': 1, '(8,-5)': 1,
        '(12,3)': 1, '(3,-46)': 4, '(1,-38)': 1, '(3,-47)': 3, '(0,-89)': 1, '(0,83)': 4, '(4,-20)': 4, '(0,70)': 2,
        '(10,3)': 2, '(5,39)': 1, '(10,-15)': 1, '(0,-75)': 1, '(1,58)': 1, '(10,8)': 1, '(3,13)': 1, '(11,-6)': 1,
        '(1,-73)': 1, '(3,30)': 1, '(1,38)': 1, '(1,-69)': 1, '(5,23)': 1, '(10,-9)': 1, '(8,9)': 1, '(12,-8)': 1,
        '(7,-31)': 1, '(11,6)': 1, '(4,26)': 1, '(3,48)': 1, '(4,7)': 1, '(2,-16)': 1}


codec = HuffmanCodec.from_frequencies(freq)

codec.print_code_table()

a = HuffmanCodec.get_code_table(codec)

print(a)

b = codec.encode(['(7,-31)'])

print(b)



#
# freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)
#
# node = make_tree(freq)
# encoding = huffman_code_tree(node)
# print(len(encoding))
#
# for i in encoding:
#     print(f'{i} : {encoding[i]}')
#
# a = [1, 2, 3, 4]
# b = ['a', 'b', 'c', 'd']
#
# for i, j in zip(a, b):
#     print(i, j)
